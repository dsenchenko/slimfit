const TelegramBot = require('node-telegram-bot-api');
const User = require('../../models/User');
const DailyReport = require('../../models/DailyReport');
const ReportParser = require('../report/parser');
const OpenAIAnalyzer = require('../openai/analyzer');
const logger = require('../../utils/logger');

class TelegramBotService {
  constructor(token, openaiApiKey) {
    this.bot = new TelegramBot(token, { polling: true });
    this.openaiAnalyzer = new OpenAIAnalyzer(openaiApiKey);
    this.reportParser = new ReportParser();
    this.setupCommands();
    this.setupMessageHandlers();
  }

  setupCommands() {
    this.bot.setMyCommands([
      { command: 'start', description: '–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º' },
      { command: 'report', description: '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç' },
      { command: 'stats', description: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' },
      { command: 'settings', description: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è' },
      { command: 'help', description: '–î–æ–≤—ñ–¥–∫–∞' }
    ]);
  }

  setupMessageHandlers() {
    this.bot.on('message', async (msg) => {
      try {
        const user = await this.getOrCreateUser(msg.from);
        
        // Handle photo messages (screenshots)
        if (msg.photo) {
          await this.handleScreenshot(msg, user);
          return;
        }

        // Handle text messages based on user's input state
        if (msg.text) {
          if (msg.text.startsWith('/')) {
            await this.handleCommand(msg, user);
          } else {
            await this.handleInputState(msg, user);
          }
        }
      } catch (error) {
        logger.error('Error handling message:', error);
        await this.sendError(msg.chat.id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
      }
    });
  }

  async handleInputState(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;

    // If user sends a screenshot at any step, handle it
    if (msg.photo) {
      await this.handleScreenshot(msg, user);
      return;
    }

    switch (user.inputState.state) {
      case 'waiting_for_weight':
        // Only accept valid weight input
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "XX.X –∫–≥" –∞–±–æ "XX.X lbs"');
          return;
        }
        await this.handleWeightInput(msg, user);
        break;
      case 'waiting_for_steps':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)');
          return;
        }
        await this.handleStepsInput(msg, user);
        break;
      case 'waiting_for_sleep':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥–∏–Ω" –∞–±–æ "X:XX" (–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏)');
          return;
        }
        await this.handleSleepInput(msg, user);
        break;
      case 'waiting_for_calories':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)');
          return;
        }
        await this.handleCaloriesInput(msg, user);
        break;
      case 'waiting_for_training':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
          return;
        }
        await this.handleTrainingInput(msg, user);
        break;
      case 'waiting_for_mood':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—Ä—ñ–π –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
          return;
        }
        await this.handleMoodInput(msg, user);
        break;
      case 'waiting_for_comments':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"');
          return;
        }
        await this.handleCommentsInput(msg, user);
        break;
      default:
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º');
    }
  }

  async handleScreenshot(msg, user) {
    const chatId = msg.chat.id;
    const photo = msg.photo[msg.photo.length - 1]; // Get the highest quality photo

    try {
      // Download the photo
      const file = await this.bot.getFile(photo.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${this.bot.token}/${file.file_path}`;

      // TODO: Implement OCR to extract data from screenshot
      // For now, just acknowledge receipt
      await this.bot.sendMessage(chatId, 
        '–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç. –ù–∞—Ä–∞–∑—ñ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. ' +
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É.'
      );

      // Start manual input process
      await this.startReportInput(chatId, user);
    } catch (error) {
      logger.error('Error handling screenshot:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É');
    }
  }

  async startReportInput(chatId, user) {
    // Immediately start with weight input, no method selection
    user.updateInputState('waiting_for_weight');
    await user.save();
    await this.bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "XX.X –∫–≥" –∞–±–æ "XX.X lbs"');
  }

  async handleWeightInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered weight: ${text}`);
    try {
      // Accept only a number (kg)
      const value = parseFloat(text.replace(',', '.'));
      if (isNaN(value) || value < 20 || value > 300) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É –∫–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 75.5)');
        return;
      }
      const weight = { value, unit: 'kg', source: 'manual' };
      user.updateInputState('waiting_for_steps', { weight });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_steps`);
      await this.bot.sendMessage(chatId, '–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –∑–∞ –¥–µ–Ω—å:');
    } catch (error) {
      logger.error('Error handling weight input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞–≥–∏');
    }
  }

  async handleStepsInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered steps: ${text}`);
    try {
      const steps = parseInt(text);
      if (isNaN(steps) || steps < 0) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)');
        return;
      }
      user.updateInputState('waiting_for_sleep', { steps });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_sleep`);
      await this.bot.sendMessage(chatId, '–î–æ–±—Ä–µ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥–∏–Ω" –∞–±–æ "X:XX" (–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏):');
    } catch (error) {
      logger.error('Error handling steps input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫—Ä–æ–∫—ñ–≤');
    }
  }

  async handleSleepInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered sleep: ${text}`);
    try {
      const sleep = this.reportParser.parseSleep(text);
      if (!sleep) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥–∏–Ω" –∞–±–æ "X:XX" (–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏)');
        return;
      }
      user.updateInputState('waiting_for_calories', { sleep });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_calories`);
      await this.bot.sendMessage(chatId, '–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π –∑–∞ –¥–µ–Ω—å:');
    } catch (error) {
      logger.error('Error handling sleep input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å–æ–Ω');
    }
  }

  async handleCaloriesInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered calories: ${text}`);
    try {
      const calories = parseInt(text);
      if (isNaN(calories) || calories < 0) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)');
        return;
      }
      user.updateInputState('waiting_for_training', { calories });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_training`);
      const keyboard = {
        reply_markup: {
          keyboard: [
            ['üèÉ –ë—ñ–≥', 'üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥', 'üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'],
            ['üèä –ü–ª–∞–≤–∞–Ω–Ω—è', 'üö∂ –•–æ–¥—å–±–∞', '‚õπÔ∏è –Ü–Ω—à–µ'],
            ['‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      };
      await this.bot.sendMessage(chatId, '–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫:', keyboard);
    } catch (error) {
      logger.error('Error handling calories input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–∞–ª–æ—Ä—ñ–π');
    }
  }

  async handleTrainingInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered training: ${text}`);
    if (text === '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏') {
      user.updateInputState('waiting_for_mood');
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_mood`);
      await this.askForMood(chatId);
      return;
    }
    try {
      const training = this.reportParser.parseTraining(text);
      if (!training) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
        return;
      }
      user.updateInputState('waiting_for_mood', { training });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_mood`);
      await this.askForMood(chatId);
    } catch (error) {
      logger.error('Error handling training input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è');
    }
  }

  async askForMood(chatId) {
    const keyboard = {
      reply_markup: {
        keyboard: [
          ['üòä –ß—É–¥–æ–≤–æ', 'üôÇ –î–æ–±—Ä–µ', 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ'],
          ['üòî –ü–æ–≥–∞–Ω–æ', 'üò¢ –î—É–∂–µ –ø–æ–≥–∞–Ω–æ'],
          ['‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };

    await this.bot.sendMessage(chatId, 
      '–Ø–∫ –≤–∏ —Å–µ–±–µ –ø–æ—á—É–≤–∞—î—Ç–µ —Å—å–æ–≥–æ–¥–Ω—ñ?',
      keyboard
    );
  }

  async handleMoodInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered mood: ${text}`);
    if (text === '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏') {
      user.updateInputState('waiting_for_comments');
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_comments`);
      await this.askForComments(chatId);
      return;
    }
    try {
      const mood = this.reportParser.parseMood(text);
      if (!mood) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—Ä—ñ–π –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
        return;
      }
      user.updateInputState('waiting_for_comments', { mood });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_comments`);
      await this.askForComments(chatId);
    } catch (error) {
      logger.error('Error handling mood input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞—Å—Ç—Ä–æ—é');
    }
  }

  async askForComments(chatId) {
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };

    await this.bot.sendMessage(chatId, 
      '–ß–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–≤—ñ—Ç—É? (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)',
      keyboard
    );
  }

  async handleCommentsInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered comments: ${text}`);
    try {
      if (text !== '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤') {
        user.updateInputState('idle', { comments: text });
      }
      // Create and save the report
      const report = new DailyReport({
        userId: user._id,
        date: new Date(),
        ...user.inputState.currentReport
      });
      await report.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) report saved. Running OpenAI analysis...`);
      // Get AI feedback
      const feedback = await this.openaiAnalyzer.analyzeReport(report, user);
      // Update report with AI feedback
      report.aiFeedback = feedback;
      await report.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) OpenAI analysis complete.`);
      // Reset user's input state
      user.resetInputState();
      await user.save();
      // Send confirmation with AI feedback
      await this.bot.sendMessage(chatId, '‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n' + 'üìä –ê–Ω–∞–ª—ñ–∑:\n' + feedback.analysis + '\n\n' + 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:\n' + feedback.recommendations + '\n\n' + 'üéØ –¶—ñ–ª—ñ:\n' + feedback.goals, { parse_mode: 'HTML' });
      // Reset keyboard
      await this.bot.sendMessage(chatId, '–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?', { reply_markup: { remove_keyboard: true } });
    } catch (error) {
      logger.error('Error handling comments input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É');
    }
  }

  async handleCommand(msg, user) {
    const chatId = msg.chat.id;
    const command = msg.text.split(' ')[0].toLowerCase();

    switch (command) {
      case '/start':
        await this.handleStart(msg, user);
        break;
      case '/report':
        await this.startReportInput(chatId, user);
        break;
      case '/stats':
        await this.handleStats(msg, user);
        break;
      case '/settings':
        await this.handleSettings(msg, user);
        break;
      case '/help':
        await this.handleHelp(msg, user);
        break;
      default:
        await this.bot.sendMessage(chatId, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.');
    }
  }

  async getOrCreateUser(telegramUser) {
    try {
      let user = await User.findOne({ telegramId: telegramUser.id.toString() });
      
      if (!user) {
        user = new User({
          telegramId: telegramUser.id.toString(),
          username: telegramUser.username || `user_${telegramUser.id}`,
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name
        });
        await user.save();
        logger.info(`Created new user: ${user.username}`);
      }
      
      return user;
    } catch (error) {
      logger.error('Error in getOrCreateUser:', error);
      throw error;
    }
  }

  async handleStart(msg, user) {
    const chatId = msg.chat.id;
    const welcomeMessage = `–í—ñ—Ç–∞—é –≤ SlimFit, ${user.firstName}! üéâ\n\n` +
      "–Ø –≤–∞—à AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è. –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–∞—à —à–ª—è—Ö –¥–æ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É.\n\n" +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /report –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ–≥—Ä–µ—Å—É\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /settings –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏';

    await this.bot.sendMessage(chatId, welcomeMessage);
  }

  async handleStats(msg, user) {
    // Implementation of handleStats method
  }

  async handleSettings(msg, user) {
    // Implementation of handleSettings method
  }

  async handleHelp(msg, user) {
    const helpMessage = 'üìö *–î–æ–≤—ñ–¥–∫–∞ SlimFit Bot*\n\n' +
      '*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n' +
      '‚Ä¢ /start - –ü–æ—á–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞\n' +
      '‚Ä¢ /report - –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç\n' +
      '‚Ä¢ /stats - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
      '‚Ä¢ /settings - –ö–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏\n\n' +
      '*–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —â–æ–¥–æ –∑–≤—ñ—Ç—É:*\n' +
      '–ü—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–≤—ñ—Ç—É –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏:\n' +
      '‚Ä¢ –í–∞–≥—É\n' +
      '‚Ä¢ –ö–∞–ª–æ—Ä—ñ—ó —Ç–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è\n' +
      '‚Ä¢ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n' +
      '‚Ä¢ –ù–∞—Å—Ç—Ä—ñ–π —Ç–∞ —Å–æ–Ω\n' +
      '‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ\n\n' +
      '–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤–æ—ó –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ Garmin Connect —Ç–∞ FatSecret –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö.';

    await this.bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
  }

  async sendError(chatId, message) {
    await this.bot.sendMessage(chatId, `‚ùå ${message}`);
  }
}

module.exports = TelegramBotService; 