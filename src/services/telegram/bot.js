const TelegramBot = require('node-telegram-bot-api');
const User = require('../../models/User');
const DailyReport = require('../../models/DailyReport');
const ReportParser = require('../report/parser');
const OpenAIAnalyzer = require('../openai/analyzer');
const FatSecretAnalyzer = require('../fatsecret/analyzer');
const logger = require('../../utils/logger');

class TelegramBotService {
  constructor(token, openaiApiKey, fatSecretKey, fatSecretSecret) {
    this.bot = new TelegramBot(token, { polling: true });
    this.openaiAnalyzer = new OpenAIAnalyzer(openaiApiKey);
    this.fatSecretAnalyzer = new FatSecretAnalyzer(fatSecretKey, fatSecretSecret);
    this.reportParser = new ReportParser();
    this.setupCommands();
    this.setupMessageHandlers();
  }

  setupCommands() {
    this.bot.setMyCommands([
      { command: 'start', description: '–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º' },
      { command: 'report', description: '–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç' },
      { command: 'fatsecret', description: '–Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ FatSecret' },
      { command: 'stats', description: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É' },
      { command: 'settings', description: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è' },
      { command: 'help', description: '–î–æ–≤—ñ–¥–∫–∞' }
    ]);
  }

  setupMessageHandlers() {
    this.bot.on('message', async (msg) => {
      try {
        const user = await this.getOrCreateUser(msg.from);
        
        // Handle photo messages (screenshots)
        if (msg.photo) {
          await this.handleScreenshot(msg, user);
          return;
        }

        // Handle text messages based on user's input state
        if (msg.text) {
          if (msg.text.startsWith('/')) {
            await this.handleCommand(msg, user);
          } else {
            await this.handleInputState(msg, user);
          }
        }
      } catch (error) {
        logger.error('Error handling message:', error);
        await this.sendError(msg.chat.id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
      }
    });
  }

  async handleInputState(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;

    // If user sends a screenshot at any step, handle it
    if (msg.photo) {
      await this.handleScreenshot(msg, user);
      return;
    }

    switch (user.inputState.state) {
      case 'waiting_for_weight':
        // Only accept valid weight input
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "XX.X –∫–≥" –∞–±–æ "XX.X lbs"');
          return;
        }
        await this.handleWeightInput(msg, user);
        break;
      case 'waiting_for_steps':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)');
          return;
        }
        await this.handleStepsInput(msg, user);
        break;
      case 'waiting_for_sleep':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥–∏–Ω" –∞–±–æ "X:XX" (–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏)');
          return;
        }
        await this.handleSleepInput(msg, user);
        break;
      case 'waiting_for_calories':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)');
          return;
        }
        await this.handleCaloriesInput(msg, user);
        break;
      case 'waiting_for_training':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
          return;
        }
        await this.handleTrainingInput(msg, user);
        break;
      case 'waiting_for_mood':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—Ä—ñ–π –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
          return;
        }
        await this.handleMoodInput(msg, user);
        break;
      case 'waiting_for_comments':
        if (text && (text === '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É' || text === 'üì∏ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç' || text === '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏')) {
          await this.bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"');
          return;
        }
        await this.handleCommentsInput(msg, user);
        break;
      case 'waiting_for_fatsecret_action':
        await this.handleFatSecretAction(msg, user);
        break;
      default:
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º');
    }
  }

  async handleScreenshot(msg, user) {
    const chatId = msg.chat.id;
    const photo = msg.photo[msg.photo.length - 1]; // Get the highest quality photo

    try {
      // Download the photo
      const file = await this.bot.getFile(photo.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${this.bot.token}/${file.file_path}`;

      // TODO: Implement OCR to extract data from screenshot
      // For now, just acknowledge receipt
      await this.bot.sendMessage(chatId, 
        '–Ø –æ—Ç—Ä–∏–º–∞–≤ –≤–∞—à —Å–∫—Ä—ñ–Ω—à–æ—Ç. –ù–∞—Ä–∞–∑—ñ —Ñ—É–Ω–∫—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. ' +
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É.'
      );

      // Start manual input process
      await this.startReportInput(chatId, user);
    } catch (error) {
      logger.error('Error handling screenshot:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Å–∫—Ä—ñ–Ω—à–æ—Ç—É');
    }
  }

  async startReportInput(chatId, user) {
    // Immediately start with weight input, no method selection
    user.updateInputState('waiting_for_weight');
    await user.save();
    await this.bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "XX.X –∫–≥" –∞–±–æ "XX.X lbs"');
  }

  async handleWeightInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered weight: ${text}`);
    try {
      // Accept only a number (kg)
      const value = parseFloat(text.replace(',', '.'));
      if (isNaN(value) || value < 20 || value > 300) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤–∞–≥—É —É –∫–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 75.5)');
        return;
      }
      const weight = { value, unit: 'kg', source: 'manual' };
      user.updateInputState('waiting_for_steps', { weight });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_steps`);
      await this.bot.sendMessage(chatId, '–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –∑–∞ –¥–µ–Ω—å:');
    } catch (error) {
      logger.error('Error handling weight input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞–≥–∏');
    }
  }

  async handleStepsInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered steps: ${text}`);
    try {
      const steps = parseInt(text);
      if (isNaN(steps) || steps < 0) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ (—Ü—ñ–ª–µ —á–∏—Å–ª–æ)');
        return;
      }
      user.updateInputState('waiting_for_sleep', { steps });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_sleep`);
      await this.bot.sendMessage(chatId, '–î–æ–±—Ä–µ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥–∏–Ω" –∞–±–æ "X:XX" (–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏):');
    } catch (error) {
      logger.error('Error handling steps input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫—Ä–æ–∫—ñ–≤');
    }
  }

  async handleSleepInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered sleep: ${text}`);
    try {
      const sleep = this.reportParser.parseSleep(text);
      if (!sleep) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Å–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ "X –≥–æ–¥–∏–Ω" –∞–±–æ "X:XX" (–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏)');
        return;
      }
      user.updateInputState('waiting_for_calories', { sleep });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_calories`);
      await this.bot.sendMessage(chatId, '–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π –∑–∞ –¥–µ–Ω—å:');
    } catch (error) {
      logger.error('Error handling sleep input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å–æ–Ω');
    }
  }

  async handleCaloriesInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered calories: ${text}`);
    
    try {
      // Check if user wants to import from FatSecret
      if (text === 'üì± –Ü–º–ø–æ—Ä—Ç –∑ FatSecret') {
        await this.importFromFatSecret(chatId, user);
        return;
      }
      
      // First, try to parse as a simple number
      const simpleCalories = parseInt(text);
      
      if (!isNaN(simpleCalories) && simpleCalories > 0 && simpleCalories <= 10000) {
        // Simple calorie input
        const nutrition = {
          calories: { value: simpleCalories, source: 'manual' }
        };
        user.updateInputState('waiting_for_training', { nutrition });
        await user.save();
        logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_training`);
        
        const keyboard = {
          reply_markup: {
            keyboard: [
              ['üèÉ –ë—ñ–≥', 'üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥', 'üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'],
              ['üèä –ü–ª–∞–≤–∞–Ω–Ω—è', 'üö∂ –•–æ–¥—å–±–∞', '‚õπÔ∏è –Ü–Ω—à–µ'],
              ['‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']
            ],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        };
        await this.bot.sendMessage(chatId, 
          `‚úÖ –ö–∞–ª–æ—Ä—ñ—ó: ${simpleCalories}\n\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫:`, 
          keyboard
        );
        return;
      }
      
      // If not a simple number, try to parse as food description using FatSecret
      if (text.length > 3) {
        await this.bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª—ñ–∑—É—é –ø—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ FatSecret...');
        
        const nutritionResult = await this.fatSecretAnalyzer.parseManualFoodInput(text);
        
        if (nutritionResult.success) {
          const nutrition = {
            calories: { value: nutritionResult.data.calories, source: 'fatsecret' },
            protein: nutritionResult.data.protein,
            carbs: nutritionResult.data.carbs,
            fat: nutritionResult.data.fat,
            fiber: nutritionResult.data.fiber,
            sugar: nutritionResult.data.sugar,
            sodium: nutritionResult.data.sodium,
            meals: nutritionResult.data.meals
          };
          
          user.updateInputState('waiting_for_training', { nutrition });
          await user.save();
          logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_training (FatSecret)`);
          
          // Format detailed nutrition message
          const nutritionMessage = this.fatSecretAnalyzer.formatNutritionMessage(nutritionResult.data);
          
          const keyboard = {
            reply_markup: {
              keyboard: [
                ['üèÉ –ë—ñ–≥', 'üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥', 'üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'],
                ['üèä –ü–ª–∞–≤–∞–Ω–Ω—è', 'üö∂ –•–æ–¥—å–±–∞', '‚õπÔ∏è –Ü–Ω—à–µ'],
                ['‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']
              ],
              resize_keyboard: true,
              one_time_keyboard: true
            }
          };
          
          await this.bot.sendMessage(chatId, 
            `${nutritionMessage}\n\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫:`, 
            keyboard
          );
          return;
        } else {
          // FatSecret parsing failed, ask for clarification
          await this.bot.sendMessage(chatId, 
            `‚ùå ${nutritionResult.error}\n\n` +
            '–í–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n' +
            '‚Ä¢ –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –∫–∞–ª–æ—Ä—ñ–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2000)\n' +
            '‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "2 —è–±–ª—É–∫–∞, 200–≥ –∫—É—Ä–∫–∞, 1 —Å–∫–ª—è–Ω–∫–∞ —Ä–∏—Å—É")\n' +
            '‚Ä¢ –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–Ω–æ–ø–∫—É "üì± –Ü–º–ø–æ—Ä—Ç –∑ FatSecret"\n\n' +
            '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:'
          );
          return;
        }
      }
      
      // Invalid input
      const keyboard = {
        reply_markup: {
          keyboard: [
            ['üì± –Ü–º–ø–æ—Ä—Ç –∑ FatSecret'],
            ['‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      };
      
      await this.bot.sendMessage(chatId, 
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å:\n' +
        '‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π (—á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10000)\n' +
        '‚Ä¢ –ê–±–æ –æ–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —ó–ª–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "2 —è–±–ª—É–∫–∞, —Å–∞–ª–∞—Ç, 200–≥ –∫—É—Ä–∫–∞")\n' +
        '‚Ä¢ –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –∑ FatSecret',
        keyboard
      );
      
    } catch (error) {
      logger.error('Error handling calories input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–∞–ª–æ—Ä—ñ–π');
    }
  }

  async importFromFatSecret(chatId, user) {
    try {
      await this.bot.sendMessage(chatId, 'üîç –Ü–º–ø–æ—Ä—Ç—É—é –¥–∞–Ω—ñ –∑ FatSecret...');
      
      // Use user's Telegram ID as FatSecret profile ID
      const userId = user.telegramId;
      const today = new Date();
      
      const nutritionResult = await this.fatSecretAnalyzer.getNutritionFromDiary(userId, today);
      
      if (nutritionResult.success) {
        const nutrition = {
          calories: { value: nutritionResult.data.calories, source: 'fatsecret' },
          protein: nutritionResult.data.protein,
          carbs: nutritionResult.data.carbs,
          fat: nutritionResult.data.fat,
          fiber: nutritionResult.data.fiber,
          sugar: nutritionResult.data.sugar,
          sodium: nutritionResult.data.sodium,
          meals: nutritionResult.data.meals
        };
        
        user.updateInputState('waiting_for_training', { nutrition });
        
        // Update user's FatSecret integration status
        if (!user.integrations.fatSecret.enabled) {
          user.integrations.fatSecret.enabled = true;
          user.integrations.fatSecret.profileId = userId;
          user.integrations.fatSecret.lastSync = new Date();
        }
        
        await user.save();
        logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_training (FatSecret Import)`);
        
        // Format detailed nutrition message
        const nutritionMessage = this.fatSecretAnalyzer.formatDiaryByMeals(nutritionResult.data);
        
        const keyboard = {
          reply_markup: {
            keyboard: [
              ['üèÉ –ë—ñ–≥', 'üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥', 'üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è'],
              ['üèä –ü–ª–∞–≤–∞–Ω–Ω—è', 'üö∂ –•–æ–¥—å–±–∞', '‚õπÔ∏è –Ü–Ω—à–µ'],
              ['‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']
            ],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        };
        
        await this.bot.sendMessage(chatId, 
          `${nutritionMessage}\n–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫:`, 
          keyboard
        );
      } else {
        await this.bot.sendMessage(chatId, 
          `‚ùå ${nutritionResult.error}\n\n` +
          '–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –¥–æ–¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ FatSecret –¥–æ–¥–∞—Ç–æ–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.\n\n' +
          '–í–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –≤—Ä—É—á–Ω—É:'
        );
      }
    } catch (error) {
      logger.error('Error importing from FatSecret:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –∑ FatSecret');
    }
  }

  async handleFatSecret(msg, user) {
    const chatId = msg.chat.id;
    
    try {
      const keyboard = {
        reply_markup: {
          keyboard: [
            ['üìÖ –°—å–æ–≥–æ–¥–Ω—ñ', 'üìÖ –í—á–æ—Ä–∞'],
            ['üìä –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å', 'üìä –¶–µ–π –º—ñ—Å—è—Ü—å'],
            ['‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', '‚ùå –ó–∞–∫—Ä–∏—Ç–∏']
          ],
          resize_keyboard: true,
          one_time_keyboard: true
        }
      };
      
      await this.bot.sendMessage(chatId, 
        'üì± FatSecret –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è\n\n' +
        '–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö –∑ –≤–∞—à–æ–≥–æ FatSecret —â–æ–¥–µ–Ω–Ω–∏–∫–∞:',
        keyboard
      );
      
      // Set user state to handle FatSecret commands
      user.updateInputState('waiting_for_fatsecret_action');
      await user.save();
      
    } catch (error) {
      logger.error('Error handling FatSecret command:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏ FatSecret');
    }
  }

  async handleFatSecretAction(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    try {
      // Reset user state
      user.updateInputState('idle');
      await user.save();
      
      const userId = user.telegramId;
      
      switch (text) {
        case 'üìÖ –°—å–æ–≥–æ–¥–Ω—ñ':
          await this.importFatSecretDay(chatId, userId, new Date());
          break;
        case 'üìÖ –í—á–æ—Ä–∞':
          const yesterday = new Date();
          yesterday.setDate(yesterday.getDate() - 1);
          await this.importFatSecretDay(chatId, userId, yesterday);
          break;
        case 'üìä –¶–µ–π —Ç–∏–∂–¥–µ–Ω—å':
          await this.importFatSecretWeek(chatId, userId);
          break;
        case 'üìä –¶–µ–π –º—ñ—Å—è—Ü—å':
          const now = new Date();
          await this.importFatSecretMonth(chatId, userId, now.getFullYear(), now.getMonth() + 1);
          break;
        case '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':
          await this.showFatSecretSettings(chatId, user);
          break;
        case '‚ùå –ó–∞–∫—Ä–∏—Ç–∏':
          await this.bot.sendMessage(chatId, 'FatSecret –º–µ–Ω—é –∑–∞–∫—Ä–∏—Ç–æ.', {
            reply_markup: { remove_keyboard: true }
          });
          break;
        default:
          await this.bot.sendMessage(chatId, '–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /fatsecret –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é.');
      }
    } catch (error) {
      logger.error('Error handling FatSecret action:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ FatSecret –¥—ñ—ó');
    }
  }

  async importFatSecretDay(chatId, userId, date) {
    try {
      await this.bot.sendMessage(chatId, `üîç –Ü–º–ø–æ—Ä—Ç—É—é –¥–∞–Ω—ñ –∑ FatSecret –∑–∞ ${date.toLocaleDateString('uk-UA')}...`);
      
      const nutritionResult = await this.fatSecretAnalyzer.getNutritionFromDiary(userId, date);
      
      if (nutritionResult.success) {
        const nutritionMessage = this.fatSecretAnalyzer.formatDiaryByMeals(nutritionResult.data);
        await this.bot.sendMessage(chatId, nutritionMessage);
      } else {
        await this.bot.sendMessage(chatId, 
          `‚ùå ${nutritionResult.error}\n\n` +
          '–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –¥–æ–¥–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ FatSecret –¥–æ–¥–∞—Ç–æ–∫ –Ω–∞ —Ü—é –¥–∞—Ç—É.'
        );
      }
    } catch (error) {
      logger.error('Error importing FatSecret day:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –¥–µ–Ω–Ω–∏—Ö –¥–∞–Ω–∏—Ö');
    }
  }

  async importFatSecretWeek(chatId, userId) {
    try {
      await this.bot.sendMessage(chatId, 'üîç –Ü–º–ø–æ—Ä—Ç—É—é –¥–∞–Ω—ñ –∑ FatSecret –∑–∞ —Ç–∏–∂–¥–µ–Ω—å...');
      
      const today = new Date();
      const weekData = [];
      
      // Get data for the last 7 days
      for (let i = 0; i < 7; i++) {
        const date = new Date(today);
        date.setDate(date.getDate() - i);
        
        const nutritionResult = await this.fatSecretAnalyzer.getNutritionFromDiary(userId, date);
        if (nutritionResult.success) {
          weekData.push({
            date: date,
            nutrition: nutritionResult.data
          });
        }
      }
      
      if (weekData.length === 0) {
        await this.bot.sendMessage(chatId, '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É FatSecret –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å.');
        return;
      }
      
      // Format week summary
      let message = 'üìä –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç –∑ FatSecret:\n\n';
      let totalCalories = 0;
      let totalProtein = 0;
      let totalCarbs = 0;
      let totalFat = 0;
      
      weekData.forEach(day => {
        const dateStr = day.date.toLocaleDateString('uk-UA', { weekday: 'short', day: 'numeric', month: 'short' });
        message += `${dateStr}: ${Math.round(day.nutrition.calories)} –∫–∫–∞–ª\n`;
        totalCalories += day.nutrition.calories;
        totalProtein += day.nutrition.protein;
        totalCarbs += day.nutrition.carbs;
        totalFat += day.nutrition.fat;
      });
      
      const avgCalories = totalCalories / weekData.length;
      message += `\nüìà –°–µ—Ä–µ–¥–Ω—î –∑–∞ –¥–µ–Ω—å: ${Math.round(avgCalories)} –∫–∫–∞–ª\n`;
      message += `ü•© –ë—ñ–ª–∫–∏: ${Math.round(totalProtein / weekData.length)}–≥\n`;
      message += `üçû –í—É–≥–ª–µ–≤–æ–¥–∏: ${Math.round(totalCarbs / weekData.length)}–≥\n`;
      message += `üßà –ñ–∏—Ä–∏: ${Math.round(totalFat / weekData.length)}–≥`;
      
      await this.bot.sendMessage(chatId, message);
    } catch (error) {
      logger.error('Error importing FatSecret week:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ç–∏–∂–Ω–µ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
    }
  }

  async importFatSecretMonth(chatId, userId, year, month) {
    try {
      await this.bot.sendMessage(chatId, `üîç –Ü–º–ø–æ—Ä—Ç—É—é –¥–∞–Ω—ñ –∑ FatSecret –∑–∞ ${month}/${year}...`);
      
      const monthResult = await this.fatSecretAnalyzer.getNutritionFromDiaryMonth(userId, year, month);
      
      if (monthResult.success && monthResult.data.length > 0) {
        // Process month data (this would need more complex processing)
        await this.bot.sendMessage(chatId, 
          `üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${monthResult.data.length} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ ${month}/${year}\n\n` +
          '–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –º—ñ—Å—è—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö.'
        );
      } else {
        await this.bot.sendMessage(chatId, 
          `‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö —É FatSecret –∑–∞ ${month}/${year}`
        );
      }
    } catch (error) {
      logger.error('Error importing FatSecret month:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –º—ñ—Å—è—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö');
    }
  }

  async showFatSecretSettings(chatId, user) {
    try {
      const isEnabled = user.integrations.fatSecret.enabled;
      const lastSync = user.integrations.fatSecret.lastSync;
      
      let message = '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è FatSecret:\n\n';
      message += `–°—Ç–∞—Ç—É—Å: ${isEnabled ? '‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n`;
      
      if (lastSync) {
        message += `–û—Å—Ç–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è: ${lastSync.toLocaleString('uk-UA')}\n`;
      }
      
      message += '\n‚ÑπÔ∏è FatSecret —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –∑ –≤–∞—à–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è.\n';
      message += '–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ –≤–µ–¥–µ—Ç–µ —â–æ–¥–µ–Ω–Ω–∏–∫ —É FatSecret –¥–æ–¥–∞—Ç–∫—É.';
      
      await this.bot.sendMessage(chatId, message);
    } catch (error) {
      logger.error('Error showing FatSecret settings:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å');
    }
  }

  async handleTrainingInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered training: ${text}`);
    if (text === '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏') {
      user.updateInputState('waiting_for_mood');
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_mood`);
      await this.askForMood(chatId);
      return;
    }
    try {
      const training = this.reportParser.parseTraining(text);
      if (!training) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
        return;
      }
      user.updateInputState('waiting_for_mood', { training });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_mood`);
      await this.askForMood(chatId);
    } catch (error) {
      logger.error('Error handling training input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è');
    }
  }

  async askForMood(chatId) {
    const keyboard = {
      reply_markup: {
        keyboard: [
          ['üòä –ß—É–¥–æ–≤–æ', 'üôÇ –î–æ–±—Ä–µ', 'üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ'],
          ['üòî –ü–æ–≥–∞–Ω–æ', 'üò¢ –î—É–∂–µ –ø–æ–≥–∞–Ω–æ'],
          ['‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };

    await this.bot.sendMessage(chatId, 
      '–Ø–∫ –≤–∏ —Å–µ–±–µ –ø–æ—á—É–≤–∞—î—Ç–µ —Å—å–æ–≥–æ–¥–Ω—ñ?',
      keyboard
    );
  }

  async handleMoodInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered mood: ${text}`);
    if (text === '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏') {
      user.updateInputState('waiting_for_comments');
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_comments`);
      await this.askForComments(chatId);
      return;
    }
    try {
      const mood = this.reportParser.parseMood(text);
      if (!mood) {
        await this.bot.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—Ä—ñ–π –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫');
        return;
      }
      user.updateInputState('waiting_for_comments', { mood });
      await user.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) -> waiting_for_comments`);
      await this.askForComments(chatId);
    } catch (error) {
      logger.error('Error handling mood input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –Ω–∞—Å—Ç—Ä–æ—é');
    }
  }

  async askForComments(chatId) {
    const keyboard = {
      reply_markup: {
        keyboard: [
          [{ text: '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      }
    };

    await this.bot.sendMessage(chatId, 
      '–ß–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –∑–≤—ñ—Ç—É? (–Ω–µ–æ–±–æ–≤\'—è–∑–∫–æ–≤–æ)',
      keyboard
    );
  }

  async handleCommentsInput(msg, user) {
    const chatId = msg.chat.id;
    const text = msg.text;
    logger.info(`[STEP] User ${user.username} (${user.telegramId}) entered comments: ${text}`);
    try {
      if (text !== '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤') {
        user.updateInputState('idle', { comments: text });
      }
      // Create and save the report
      const report = new DailyReport({
        userId: user._id,
        date: new Date(),
        ...user.inputState.currentReport
      });
      await report.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) report saved. Running OpenAI analysis...`);
      // Get AI feedback
      const feedback = await this.openaiAnalyzer.analyzeReport(report, user);
      // Update report with AI feedback
      report.aiFeedback = feedback;
      await report.save();
      logger.info(`[STEP] User ${user.username} (${user.telegramId}) OpenAI analysis complete.`);
      // Reset user's input state
      user.resetInputState();
      await user.save();
      // Send confirmation with AI feedback
      await this.bot.sendMessage(chatId, '‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n' + 'üìä –ê–Ω–∞–ª—ñ–∑:\n' + feedback.analysis + '\n\n' + 'üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:\n' + feedback.recommendations + '\n\n' + 'üéØ –¶—ñ–ª—ñ:\n' + feedback.goals, { parse_mode: 'HTML' });
      // Reset keyboard
      await this.bot.sendMessage(chatId, '–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?', { reply_markup: { remove_keyboard: true } });
    } catch (error) {
      logger.error('Error handling comments input:', error);
      await this.sendError(chatId, '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–≤—ñ—Ç—É');
    }
  }

  async handleCommand(msg, user) {
    const chatId = msg.chat.id;
    const command = msg.text.split(' ')[0].toLowerCase();

    switch (command) {
      case '/start':
        await this.handleStart(msg, user);
        break;
      case '/report':
        await this.startReportInput(chatId, user);
        break;
      case '/fatsecret':
        await this.handleFatSecret(msg, user);
        break;
      case '/stats':
        await this.handleStats(msg, user);
        break;
      case '/settings':
        await this.handleSettings(msg, user);
        break;
      case '/help':
        await this.handleHelp(msg, user);
        break;
      default:
        await this.bot.sendMessage(chatId, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.');
    }
  }

  async getOrCreateUser(telegramUser) {
    try {
      let user = await User.findOne({ telegramId: telegramUser.id.toString() });
      
      if (!user) {
        user = new User({
          telegramId: telegramUser.id.toString(),
          username: telegramUser.username || `user_${telegramUser.id}`,
          firstName: telegramUser.first_name,
          lastName: telegramUser.last_name
        });
        await user.save();
        logger.info(`Created new user: ${user.username}`);
      }
      
      return user;
    } catch (error) {
      logger.error('Error in getOrCreateUser:', error);
      throw error;
    }
  }

  async handleStart(msg, user) {
    const chatId = msg.chat.id;
    const welcomeMessage = `–í—ñ—Ç–∞—é –≤ SlimFit, ${user.firstName}! üéâ\n\n` +
      "–Ø –≤–∞—à AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è. –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –≤–∞—à —à–ª—è—Ö –¥–æ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É.\n\n" +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /report –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ–≥—Ä–µ—Å—É\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /settings –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å\n' +
      '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏';

    await this.bot.sendMessage(chatId, welcomeMessage);
  }

  async handleStats(msg, user) {
    // Implementation of handleStats method
  }

  async handleSettings(msg, user) {
    // Implementation of handleSettings method
  }

  async handleHelp(msg, user) {
    const helpMessage = 'üìö *–î–æ–≤—ñ–¥–∫–∞ SlimFit Bot*\n\n' +
      '*–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n' +
      '‚Ä¢ /start - –ü–æ—á–∞—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞\n' +
      '‚Ä¢ /report - –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç\n' +
      '‚Ä¢ /fatsecret - –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ FatSecret\n' +
      '‚Ä¢ /stats - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n' +
      '‚Ä¢ /settings - –ö–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏\n\n' +
      '*–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —â–æ–¥–æ –∑–≤—ñ—Ç—É:*\n' +
      '–ü—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–≤—ñ—Ç—É –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏:\n' +
      '‚Ä¢ –í–∞–≥—É\n' +
      '‚Ä¢ –ö–∞–ª–æ—Ä—ñ—ó —Ç–∞ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è\n' +
      '‚Ä¢ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è\n' +
      '‚Ä¢ –ù–∞—Å—Ç—Ä—ñ–π —Ç–∞ —Å–æ–Ω\n' +
      '‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ\n\n' +
      '–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤–æ—ó –æ–±–ª—ñ–∫–æ–≤—ñ –∑–∞–ø–∏—Å–∏ Garmin Connect —Ç–∞ FatSecret –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö.';

    await this.bot.sendMessage(msg.chat.id, helpMessage, { parse_mode: 'Markdown' });
  }

  async sendError(chatId, message) {
    await this.bot.sendMessage(chatId, `‚ùå ${message}`);
  }
}

module.exports = TelegramBotService; 