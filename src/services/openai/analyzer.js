const { OpenAI } = require('openai');
const logger = require('../../utils/logger');

class OpenAIAnalyzer {
  constructor(apiKey) {
    this.openai = new OpenAI({ apiKey });
    this.model = 'gpt-4-turbo-preview';
  }

  async analyzeReport(report, user, history) {
    try {
      if (!Array.isArray(history)) history = [];
      const prompt = this.buildPrompt(report, user, history);
      
      const response = await this.openai.chat.completions.create({
        model: this.model,
        messages: [
          {
            role: 'system',
            content: `–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è —Ç–∞ —Ñ—ñ—Ç–Ω–µ—Å—É. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –∑–≤—ñ—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ –Ω–∞–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
            
            –¢–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏:
            1. –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º–∏ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º–∏
            2. –ü—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–º–∏ —Ç–∞ –º–æ—Ç–∏–≤—É—é—á–∏–º–∏
            3. –ó–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–∏–º–∏ –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è—Ö
            4. –ù–∞–ø–∏—Å–∞–Ω–∏–º–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é
            
            –°—Ç—Ä—É–∫—Ç—É—Ä—É–π —Å–≤–æ—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º —á–∏–Ω–æ–º:
            
            üìä –ê–ù–ê–õ–Ü–ó:
            - –ö–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
            - –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏
            - –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–µ–Ω–¥—ñ–≤ —Ç–∞ –ø–∞—Ç–µ—Ä–Ω—ñ–≤
            
            üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:
            - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è
            - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å
            - –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ —Å–Ω—É —Ç–∞ –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É
            - –ó–∞–≥–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±—É –∂–∏—Ç—Ç—è
            
            üéØ –¶–Ü–õ–Ü:
            - –ö–æ—Ä–æ—Ç–∫–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —Ü—ñ–ª—ñ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–Ω—ñ
            - –î–æ–≤–≥–æ—Å—Ç—Ä–æ–∫–æ–≤—ñ —Ü—ñ–ª—ñ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
            
            –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É –µ–º–æ–¥–∑—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ, –∞–ª–µ –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞—Ä–∞–π—Å—è.`
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1000
      });

      const analysis = response.choices[0].message.content;
      return this.parseAnalysis(analysis);
    } catch (error) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É –∑–≤—ñ—Ç—É:', error);
      throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }

  buildPrompt(report, user, history) {
    const currentReport = this.formatReport(report);
    const historyFormatted = this.formatHistory(history);

    return `–ü–æ—Ç–æ—á–Ω–∏–π –∑–≤—ñ—Ç:
${currentReport}

${historyFormatted ? `–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –∑–≤—ñ—Ç—ñ–≤:
${historyFormatted}` : ''}

–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –∑–≤—ñ—Ç —Ç–∞ –Ω–∞–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.`;
  }

  formatReport(report) {
    const parts = [];

    if (report.weight) {
      parts.push(`–í–∞–≥–∞: ${report.weight.value} ${report.weight.unit}`);
    }

    if (report.nutrition) {
      const nutrition = report.nutrition;
      const nutritionParts = [];
      
      if (nutrition.calories) {
        nutritionParts.push(`–ö–∞–ª–æ—Ä—ñ—ó: ${nutrition.calories.value}`);
      }
      if (nutrition.protein) nutritionParts.push(`–ë—ñ–ª–∫–∏: ${nutrition.protein}–≥`);
      if (nutrition.carbs) nutritionParts.push(`–í—É–≥–ª–µ–≤–æ–¥–∏: ${nutrition.carbs}–≥`);
      if (nutrition.fat) nutritionParts.push(`–ñ–∏—Ä–∏: ${nutrition.fat}–≥`);
      if (nutrition.water) nutritionParts.push(`–í–æ–¥–∞: ${nutrition.water}–º–ª`);
      
      if (nutritionParts.length > 0) {
        parts.push(`–•–∞—Ä—á—É–≤–∞–Ω–Ω—è:\n${nutritionParts.join('\n')}`);
      }
      if (nutrition.notes) parts.push(`–ü—Ä–∏–º—ñ—Ç–∫–∏ —â–æ–¥–æ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è: ${nutrition.notes}`);
    }

    if (report.training) {
      const training = report.training;
      const trainingParts = [
        `–¢–∏–ø: ${this.getTrainingTypeInUkrainian(training.type)}`,
        `–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${training.duration} —Ö–≤`,
        `–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å: ${this.getIntensityInUkrainian(training.intensity)}`
      ];
      if (training.description) trainingParts.push(`–û–ø–∏—Å: ${training.description}`);
      parts.push(`–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:\n${trainingParts.join('\n')}`);
    }

    if (report.mood) {
      parts.push(`–ù–∞—Å—Ç—Ä—ñ–π: ${report.mood.rating}/10 (${report.mood.description})`);
    }

    if (report.sleep) {
      const sleep = report.sleep;
      parts.push(`–°–æ–Ω: ${Math.floor(sleep.duration / 60)}–≥ ${sleep.duration % 60}—Ö–≤ (${this.getSleepQualityInUkrainian(sleep.quality)})`);
    }

    if (report.comments) {
      parts.push(`–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ: ${report.comments}`);
    }

    return parts.join('\n\n');
  }

  formatHistory(history) {
    if (!Array.isArray(history)) history = [];
    return history.map((report, index) => {
      const date = new Date(report.date).toLocaleDateString('uk-UA');
      return `–ó–≤—ñ—Ç –∑–∞ ${date}:\n${this.formatReport(report)}`;
    }).join('\n\n');
  }

  parseAnalysis(analysis) {
    const sections = {
      analysis: '',
      recommendations: '',
      goals: ''
    };

    const lines = analysis.split('\n');
    let currentSection = null;

    for (const line of lines) {
      if (line.includes('–ê–ù–ê–õ–Ü–ó:')) {
        currentSection = 'analysis';
        continue;
      } else if (line.includes('–†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:')) {
        currentSection = 'recommendations';
        continue;
      } else if (line.includes('–¶–Ü–õ–Ü:')) {
        currentSection = 'goals';
        continue;
      }

      if (currentSection && line.trim()) {
        sections[currentSection] += line + '\n';
      }
    }

    return {
      analysis: sections.analysis.trim(),
      recommendations: sections.recommendations.trim(),
      goals: sections.goals.trim()
    };
  }

  getTrainingTypeInUkrainian(type) {
    const types = {
      'strength': '–°–∏–ª–æ–≤–µ',
      'cardio': '–ö–∞—Ä–¥—ñ–æ',
      'flexibility': '–ì–Ω—É—á–∫—ñ—Å—Ç—å',
      'other': '–Ü–Ω—à–µ'
    };
    return types[type] || type;
  }

  getIntensityInUkrainian(intensity) {
    const intensities = {
      'low': '–ù–∏–∑—å–∫–∞',
      'medium': '–°–µ—Ä–µ–¥–Ω—è',
      'high': '–í–∏—Å–æ–∫–∞'
    };
    return intensities[intensity] || intensity;
  }

  getSleepQualityInUkrainian(quality) {
    const qualities = {
      'poor': '–ü–æ–≥–∞–Ω–∞',
      'fair': '–ó–∞–¥–æ–≤—ñ–ª—å–Ω–∞',
      'good': '–•–æ—Ä–æ—à–∞',
      'excellent': '–í—ñ–¥–º—ñ–Ω–Ω–∞'
    };
    return qualities[quality] || quality;
  }
}

module.exports = OpenAIAnalyzer; 